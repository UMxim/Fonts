from PIL import Image, ImageDraw, ImageFont
import os
import math

def char_to_bitmap(char, font, height):
    # Создаем временное изображение для измерения размера текста
    dummy = Image.new('L', (1, 1))
    draw = ImageDraw.Draw(dummy)
    # Определяем ширину символа
    bbox = draw.textbbox((0, 0), char, font=font)
    width = bbox[2] - bbox[0]
    if width == 0:
        width = height // 2  # минимальная ширина для пробела

    # Создаем изображение под размер символа
    img = Image.new('L', (width, height), color=0)
    draw = ImageDraw.Draw(img)
    draw.text((0, 0), char, font=font, fill=255)

    # Преобразуем в черно-белый формат (1 бит на пиксель)
    threshold = 128
    img = img.point(lambda x: 255 if x > threshold else 0, mode='1')

    # Преобразуем в биты по строкам
    pixels = list(img.getdata())
    width, height = img.size
    bitmap = []

    for y in range(height):
        row = []
        for x in range(width):
            pixel = pixels[y * width + x]
            row.append(1 if pixel else 0)
        bitmap.append(row)

    return bitmap, width, height

def pack_bits_to_bytes(bitmap, width):
    """Упаковывает биты построчно в байты"""
    # Собираем все биты в один массив построчно
    all_bits = []
    for row in bitmap:
        all_bits.extend(row)
    
    # Упаковываем в байты
    packed_data = []
    for i in range(0, len(all_bits), 8):
        byte = 0
        for bit_pos in range(min(8, len(all_bits) - i)):
            if all_bits[i + bit_pos]:
                byte |= (1 << (7 - bit_pos))
        packed_data.append(byte)
    
    return packed_data

def unicode_to_win1251(char):
    """Конвертирует Unicode русские буквы в Windows-1251 коды"""
    # Словарь для русских букв в Windows-1251
    rus_map = {
        'А': 192, 'Б': 193, 'В': 194, 'Г': 195, 'Д': 196, 'Е': 197, 'Ё': 168, 'Ж': 198, 'З': 199,
        'И': 200, 'Й': 201, 'К': 202, 'Л': 203, 'М': 204, 'Н': 205, 'О': 206, 'П': 207,
        'Р': 208, 'С': 209, 'Т': 210, 'У': 211, 'Ф': 212, 'Х': 213, 'Ц': 214, 'Ч': 215,
        'Ш': 216, 'Щ': 217, 'Ъ': 218, 'Ы': 219, 'Ь': 220, 'Э': 221, 'Ю': 222, 'Я': 223,
        'а': 224, 'б': 225, 'в': 226, 'г': 227, 'д': 228, 'е': 229, 'ё': 184, 'ж': 230, 'з': 231,
        'и': 232, 'й': 233, 'к': 234, 'л': 235, 'м': 236, 'н': 237, 'о': 238, 'п': 239,
        'р': 240, 'с': 241, 'т': 242, 'у': 243, 'ф': 244, 'х': 245, 'ц': 246, 'ч': 247,
        'ш': 248, 'щ': 249, 'ъ': 250, 'ы': 251, 'ь': 252, 'э': 253, 'ю': 254, 'я': 255
    }
    
    if char in rus_map:
        return rus_map[char]
    elif ord(char) <= 255:
        return ord(char)
    else:
        return None

def generate_font_bitmap(font_path, height, chars_to_include):
    font = ImageFont.truetype(font_path, height)
    
    font_data = {}
    
    for char in chars_to_include:
        char_code = unicode_to_win1251(char)
        if char_code is not None:  # Только символы с кодами 0-255
            try:
                bitmap, width, height = char_to_bitmap(char, font, height)
                font_data[char_code] = {
                    'bitmap': bitmap,
                    'width': width,
                    'height': height,
                    'char': char
                }
            except Exception as e:
                print(f"Ошибка при обработке символа '{char}' (код {char_code}): {e}")
                continue

    return font_data

def save_to_header_file(font_data, font_name, height, chars_to_include, bold=False, italic=False):
    # Создаем имя файла с учетом стиля
    style_suffix = ""
    if bold:
        style_suffix += "_bold"
    if italic:
        style_suffix += "_italic"
    
    safe_font_name = "".join(c for c in font_name if c.isalnum() or c in "._-")
    filename = f"font_{safe_font_name}_{height}{style_suffix}.h"
    
    with open(filename, 'w', encoding='utf-8') as f:
        style_text = ""
        if bold:
            style_text += " Bold"
        if italic:
            style_text += " Italic"
        
        f.write(f"// Font: {font_name}{style_text}, Height: {height}px\n")
        f.write("// Generated by Python font rasterizer\n")
        f.write(f"// Total glyphs: {len(font_data)}\n\n")
        
        # Создаем массив font_data с высотой в первом байте
        f.write("static const unsigned char font_data[] = {\n")
        f.write(f"    {height}")  # Высота шрифта
        
        all_font_bytes = [height]  # Начинаем с высоты
        glyph_offsets = {}
        current_offset = 1  # Первый байт занят высотой
        
        # Сортируем по коду символа
        sorted_chars = sorted([unicode_to_win1251(c) for c in chars_to_include if unicode_to_win1251(c) is not None])
        
        for i, char_code in enumerate(sorted_chars):
            if char_code in font_data:
                glyph = font_data[char_code]
                bitmap = glyph['bitmap']
                width = glyph['width']
                
                # Упаковываем биты в байты
                packed_bytes = pack_bits_to_bytes(bitmap, width)
                
                glyph_offsets[char_code] = current_offset
                current_offset += len(packed_bytes)
                all_font_bytes.extend(packed_bytes)
                
                # Добавляем в файл
                if i > 0:
                    f.write(",")
                f.write("\n    ")
                for j, byte in enumerate(packed_bytes):
                    if j > 0:
                        f.write(", ")
                    f.write(f"0x{byte:02X}")
        
        f.write("\n};\n\n")

        # Создаем массив глифов
        f.write("static const struct {\n")
        f.write("    unsigned char ascii_code;\n")
        f.write("    unsigned char width;\n")
        f.write("    unsigned short offset;\n")
        f.write("} glyphs[] = {\n")
        
        for i, char_code in enumerate(sorted_chars):
            if char_code in font_data:
                glyph = font_data[char_code]
                width = glyph['width']
                char_display = glyph['char']
                offset = glyph_offsets[char_code]
                
                # Экранируем специальные символы
                if char_display == '\\':
                    char_display = '\\\\'
                elif char_display == '"':
                    char_display = '\\"'
                elif char_display == "'":
                    char_display = "\\'"
                elif char_display == '\n':
                    char_display = '\\n'
                elif char_display == '\t':
                    char_display = '\\t'
                elif char_display == '\r':
                    char_display = '\\r'
                else:
                    char_display = char_display
                
                if i > 0:
                    f.write(",")
                f.write(f"\n    {{ {char_code}, {width}, {offset} }} // '{char_display}'")
        
        f.write("\n};\n")

    print(f"Файл {filename} успешно создан!")
    print(f"Всего символов: {len(font_data)}")

def get_available_fonts():
    """Возвращает список доступных шрифтов"""
    # Стандартные шрифты Windows (можно дополнить для других ОС)
    windows_fonts = {
        1: ("Arial", "arial.ttf"),
        2: ("Times New Roman", "times.ttf"),
        3: ("Courier New", "cour.ttf"),
        4: ("Calibri", "calibri.ttf"),
        5: ("Tahoma", "tahoma.ttf"),
        6: ("Verdana", "verdana.ttf")
    }
    
    # Проверяем существование файлов шрифтов
    available_fonts = {}
    font_dir = "C:\\Windows\\Fonts\\"  # Директория шрифтов Windows
    
    for key, (name, filename) in windows_fonts.items():
        font_path = os.path.join(font_dir, filename)
        if os.path.exists(font_path):
            available_fonts[key] = (name, font_path)
    
    return available_fonts

def show_font_menu():
    """Показывает меню выбора шрифта"""
    print("\n=== Выбор шрифта ===")
    fonts = get_available_fonts()
    
    if not fonts:
        print("Шрифты не найдены!")
        return None, None
    
    for key, (name, path) in fonts.items():
        print(f"{key}. {name}")
    
    print("0. Назад")
    
    try:
        choice = int(input("\nВыберите шрифт: "))
        if choice == 0:
            return None, None
        elif choice in fonts:
            return fonts[choice]
        else:
            print("Неверный выбор!")
            return None, None
    except ValueError:
        print("Неверный ввод!")
        return None, None

def show_style_menu():
    """Показывает меню выбора стиля"""
    print("\n=== Параметры шрифта ===")
    
    bold = input("Жирный шрифт? (y/n): ").lower().startswith('y')
    italic = input("Курсив? (y/n): ").lower().startswith('y')
    
    return bold, italic

def show_size_menu():
    """Показывает меню выбора размера"""
    print("\n=== Размер шрифта ===")
    
    try:
        height = int(input("Введите высоту шрифта (пиксели): "))
        if height <= 0:
            print("Высота должна быть положительным числом!")
            return None
        return height
    except ValueError:
        print("Неверный ввод!")
        return None

def show_symbols_menu():
    """Показывает меню выбора символов"""
    print("\n=== Выбор символов ===")
    print("1. Только цифры (0-9)")
    print("2. Цифры + латинские буквы (0-9, A-Z, a-z)")
    print("3. Цифры + латинские + русские (0-9, A-Z, a-z, А-Я, а-я, Ёё)")
    print("4. Пользовательский ввод")
    print("5. Все печатаемые (по умолчанию)")
    print("0. Назад")
    
    try:
        choice = int(input("\nВыберите набор символов: "))
        
        if choice == 0:
            return None, None
        elif choice == 1:
            chars = [chr(i) for i in range(ord('0'), ord('9') + 1)]
            return chars, "только цифры"
        elif choice == 2:
            chars = []
            # Цифры
            chars.extend([chr(i) for i in range(ord('0'), ord('9') + 1)])
            # Заглавные латинские
            chars.extend([chr(i) for i in range(ord('A'), ord('Z') + 1)])
            # Строчные латинские
            chars.extend([chr(i) for i in range(ord('a'), ord('z') + 1)])
            return chars, "цифры + латинские буквы"
        elif choice == 3:
            chars = []
            # Цифры
            chars.extend([chr(i) for i in range(ord('0'), ord('9') + 1)])
            # Заглавные латинские
            chars.extend([chr(i) for i in range(ord('A'), ord('Z') + 1)])
            # Строчные латинские
            chars.extend([chr(i) for i in range(ord('a'), ord('z') + 1)])
            # Русские буквы
            russian_chars = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдеёжзийклмнопрстуфхцчшщъыьэюя"
            chars.extend(list(russian_chars))
            return chars, "цифры + латинские + русские"
        elif choice == 4:
            user_input = input("Введите нужные символы: ")
            # Конвертируем и фильтруем только допустимые символы
            valid_chars = []
            invalid_count = 0
            for c in user_input:
                if unicode_to_win1251(c) is not None:
                    valid_chars.append(c)
                else:
                    invalid_count += 1
            if invalid_count > 0:
                print(f"Предупреждение: {invalid_count} символов вне допустимого диапазона будут проигнорированы")
            description = f"пользовательский ({len(valid_chars)} символов)"
            if valid_chars:
                preview = ''.join(valid_chars[:20])
                if len(valid_chars) > 20:
                    preview += "..."
                description += f": '{preview}'"
            return valid_chars, description
        elif choice == 5:
            chars = []
            # ASCII печатаемые (32-126)
            chars.extend([chr(i) for i in range(32, 127)])
            # Расширенные ASCII символы (128-255) - включая русские
            russian_chars = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдеёжзийклмнопрстуфхцчшщъыьэюя"
            chars.extend(list(russian_chars))
            return chars, "все печатаемые + русские"
        else:
            print("Неверный выбор!")
            return None, None
    except ValueError:
        print("Неверный ввод!")
        return None, None

def show_main_menu():
    """Показывает главное меню"""
    print("\n" + "="*40)
    print("ГЕНЕРАТОР РАСТРОВЫХ ШРИФТОВ")
    print("="*40)
    print("1. Выбрать шрифт")
    print("2. Выбрать параметры (жирный/курсив)")
    print("3. Выбрать размер")
    print("4. Выбрать символы")
    print("5. Сгенерировать")
    print("6. Выход")
    print("="*40)

def find_default_font():
    """Ищет шрифт Arial по умолчанию"""
    font_dir = "C:\\Windows\\Fonts\\"
    arial_paths = ["arial.ttf", "Arial.ttf", "ARIAL.TTF"]
    
    for font_file in arial_paths:
        font_path = os.path.join(font_dir, font_file)
        if os.path.exists(font_path):
            return "Arial", font_path
    
    # Если Arial не найден, ищем любой доступный шрифт
    fonts = get_available_fonts()
    if fonts:
        # Берем первый доступный шрифт
        first_key = list(fonts.keys())[0]
        return fonts[first_key]
    
    return None, None

def main():
    # Настройки по умолчанию: Arial, без параметров, размер 16
    default_font = find_default_font()
    current_font_name = default_font[0] if default_font[0] else "Arial"
    current_font_path = default_font[1] if default_font[1] else None
    current_bold = False
    current_italic = False
    current_height = 16
    current_symbols, current_symbols_desc = [], "все печатаемые + русские"
    # Установим по умолчанию полный набор
    default_chars = []
    # ASCII печатаемые (32-126)
    default_chars.extend([chr(i) for i in range(32, 127)])
    # Русские буквы
    russian_chars = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдеёжзийклмнопрстуфхцчшщъыьэюя"
    default_chars.extend(list(russian_chars))
    current_symbols = default_chars
    
    print(f"Настройки по умолчанию:")
    print(f"  Шрифт: {current_font_name}")
    print(f"  Стиль: обычный")
    print(f"  Размер: {current_height}px")
    print(f"  Символы: все печатаемые + русские")
    
    while True:
        show_main_menu()
        print(f"\nТекущие настройки:")
        print(f"  Шрифт: {current_font_name or 'Не найден'}")
        print(f"  Стиль: {'Жирный ' if current_bold else ''}{'Курсив' if current_italic else ''}")
        if not current_bold and not current_italic:
            print(f"  Стиль: обычный")
        print(f"  Размер: {current_height}px")
        print(f"  Символы: {current_symbols_desc}")
        
        try:
            choice = int(input("\nВыберите действие: "))
            
            if choice == 1:
                # Выбор шрифта
                font_name, font_path = show_font_menu()
                if font_name and font_path:
                    current_font_name = font_name
                    current_font_path = font_path
                    print(f"Выбран шрифт: {font_name}")
                    
            elif choice == 2:
                # Выбор параметров
                if current_font_path:
                    current_bold, current_italic = show_style_menu()
                    style_text = []
                    if current_bold:
                        style_text.append("жирный")
                    if current_italic:
                        style_text.append("курсив")
                    if style_text:
                        print(f"Выбраны параметры: {', '.join(style_text)}")
                    else:
                        print("Выбраны параметры: обычный")
                else:
                    print("Шрифт не найден!")
                    
            elif choice == 3:
                # Выбор размера
                height = show_size_menu()
                if height is not None:
                    current_height = height
                    print(f"Установлен размер: {height}px")
                    
            elif choice == 4:
                # Выбор символов
                symbols_result = show_symbols_menu()
                if symbols_result is not None and symbols_result[0] is not None:
                    current_symbols, current_symbols_desc = symbols_result
                    print(f"Выбран набор символов: {current_symbols_desc}")
                    
            elif choice == 5:
                # Генерация
                if current_font_path and current_font_name:
                    try:
                        print(f"\nГенерация шрифта...")
                        print(f"Шрифт: {current_font_name}")
                        print(f"Размер: {current_height}px")
                        style_text = []
                        if current_bold:
                            style_text.append("жирный")
                        if current_italic:
                            style_text.append("курсив")
                        if style_text:
                            print(f"Стиль: {', '.join(style_text)}")
                        else:
                            print("Стиль: обычный")
                        print(f"Символы: {current_symbols_desc}")
                        
                        font_data = generate_font_bitmap(
                            current_font_path, 
                            current_height,
                            current_symbols
                        )
                        
                        if font_data:
                            save_to_header_file(
                                font_data, 
                                current_font_name, 
                                current_height,
                                current_symbols,
                                current_bold,
                                current_italic
                            )
                        else:
                            print("Ошибка: не удалось сгенерировать шрифт!")
                            
                    except Exception as e:
                        print(f"Ошибка при генерации: {e}")
                else:
                    print("Шрифт не найден! Попробуйте выбрать другой шрифт.")
                    
            elif choice == 6:
                # Выход
                print("До свидания!")
                break
                
            else:
                print("Неверный выбор!")
                
        except ValueError:
            print("Неверный ввод!")
        except KeyboardInterrupt:
            print("\n\nПрограмма прервана пользователем!")
            break

if __name__ == "__main__":
    main()